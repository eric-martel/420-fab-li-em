created: 20210216123629017
modified: 20210228143440161
tags: [[2.05 Les calculs]]
title: 2.5.01 Opérations de base
type: text/vnd.tiddlywiki

Comme on a déjà pu voir dans des exemples précédents, C# supporte directement les quatre opérations de base sur tous les types numériques:

```cs
decimal num1 = 23.89;
decimal num2 = 17.41;
decimal num3;

// Addition
num3 = num1 + num2;

// Soustraction
num3 = num1 - num2;

// Multiplication
num3 = num1 * num2;

// Division
num3 = num1 / num2;

// Modulo (reste d'une division entière)
num3 = num1 % num2;

// On peut utiliser les parenthèses pour regrouper des opérations
num3 = (num1 - num2) / (num1 + num2);
```

<p class="boite">

! ''ATTENTION!''

Si vous utilisez des valeur littérales entières dans des calculs, elles seront traitées comme des ''int'' et le résultat pourrait en être affecté:

```cs
// Ci-dessous, le quotient sera de zéro
double quotient1 = 1 / 3;

// Ci-dessous, le quotient sera de 0.3333...
double quotient2 = 1.0 / 3.0;
```

Ce ne sera cependant pas le cas avec des valeurs suffixées:

```cs
// Ci-dessous, le quotient sera de 0.3333...
float quotient3 = 1f / 3f;

// Ci-dessous, le quotient sera de 0.3333...
decimal quotient4 = 1m / 3m;
```
</p>

! Opérateurs raccourcis

Lorsqu'une opération mathématique est faite sur une variable et le résultat stocké dans cette même variable, comme dans les cas ci-dessous:

```cs
num1 = num1 + num2;
num1 = num1 - num2;
num1 = num1 * num2;
num1 = num1 / num2;
num1 = num1 % num2;
```

C# offre des raccourcis évitant d'écrire deux fois le même nom de variable, de sorte que les lignes ci-dessus peuvent être réécrites de la façon suivante:

```cs
num1 += num2;
num1 -= num2;
num1 *= num2;
num1 /= num2;
num1 %= num2;
```

De plus, dans le cas spécifique où on veut ajouter ou retirer «1» à une variable, C# offre les opérateurs `++` et `--` (voir [[section 2.5.04|2.5.04 Incrémentation et décrémentation]] à ce sujet).