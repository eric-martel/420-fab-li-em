created: 20210317130415822
modified: 20210326122209517
tags: [[98 Exercices supplémentaires]]
title: 98.02 Sections 06-08
type: text/vnd.tiddlywiki

# Dans une classe //Aleatoire//, écrire une méthode //Reel// utilisant la méthode [[Random.NextDouble()|https://docs.microsoft.com/en-us/dotnet/api/system.random.nextdouble?view=net-5.0]] pour retourner un nombre pseudo-aléatoire de type ''double'' compris entre 0 et un nombre passé en argument, inclusivement (de sorte que, p.ex., `Reel(200);` retournera un nombre réel compris entre 0 et 200, inclusivement); faites attention où vous placerez l'initialisation du générateur aléatoire.
#> [[Exemple de solution|98.2.1.Solution]]

# Programmer un jeu de Nim (ou jeu des allumettes) contre l’ordinateur.<div>

Les règles du jeu sont les suivantes :

* le joueur dispose sur une table un nombre d’allumettes supérieur ou égal à 4 
* le joueur retire 1, 2 ou 3 allumettes
* l’ordinateur retire 1, 2, ou 3 allumettes
* le joueur retire 1, 2 ou 3 allumettes
* l’ordinateur retire 1, 2, ou 3 allumettes, etc...

Le gagnant est celui qui prend les dernières allumettes.

Spécifications:

* L’utilisateur sera systématiquement le premier à jouer. 

* L’utilisateur choisira le nombre initial d’allumettes. 

* Le programme devra vérifier que les règles sont respectées par l’utilisateur (nombre initial supérieur ou égal à 4, nombre d’allumettes retirées entre 1 et 3, etc.).

* Le programme tracera sur l’écran le déroulement du jeu, selon un affichage du type de celui-ci (donné a titre indicatif uniquement): [img[https://i.imgur.com/ING7IPe.png]]

* L’ordinateur doit offrir trois niveaux de difficulté :
** Débutant : tous les coups au hasard sauf le dernier coup (prend toutes les allumettes s’il en reste 3 ou moins)
** Moyen : s’il y a moyen de gagner à l’avant dernier coup, il le fait (il faut pour cela laisser 4 allumettes au joueur opposé...) 
** Infaillible : gagne chaque fois qu’il y a une opportunité!

* Le programme doit permettre de rejouer une partie si désiré; il doit tenir le décompte des scores (nombre de parties gagnées) de chaque joueur et l'afficher à la fin de chaque partie;

* Le programme doit contenir au minimum les classes suivantes:
** une classe //~JeuDeNim//, représentant le jeu de Nim;
** une classe //Partie//, représentant une partie;
** une classe //Joueur//, représentant un joueur (qui contiendra minimalement le score de chaque joueur).
</div>

#> [[Exemple de solution|https://lecegeplimoilou.sharepoint.com/sites/Section_90756/Supports%20de%20cours/Exemples%20de%20solution/JeuDeNim.zip]]

# Sachant que:<div>

* On peut convertir une chaîne en tableau de caractères de la façon suivante:<div>

```cs
string chaine = "Une chaîne";
char[] caracteres = chaine.ToCharArray();
```
</div>
* On peut convertir une chaîne ou un entier en élément d'une énumération (clef ou valeur) de la façon suivante (la casse est importante pour «enum» et «Enum»):<div>

```cs
class MaClasse
{
    enum MonType { clef1 = 10, clef2 = 20, clef3 = 30 }

    public void MaMethode()
    {
        MonType element;
        string clef = "clef2";
        int val = 20;

        // Si réussit, stocke le 2e élément de l'énumération «MonType» dans la variable «element»
        Enum.TryParse(clef, out element);

        // Si réussit, stocke aussi le 2e élément de l'énumération «MonType» dans la variable «element»
        Enum.TryParse(val.ToString(), out element);
    }
}
```
</div>

Écrire une classe appelée //Romain// contenant une méthode publique appelée //~VersArabe// permettant de convertir un nombre romain reçu en argument (<&nbsp;4000) en nombre entier arabe. Cette méthode devra utiliser une énumération pour arriver à ses fins. Cette méthode retourne l'entier arabe obtenu si la conversion réussit, sinon elle retourne 0.

<<<
''Rappel''

Dans un nombre romain, les lettres ont les valeurs suivantes:

* I = 1
* V = 5
* X = 10
* L = 50
* C = 100
* D = 500
* M = 1000

De plus, une lettre suivie d'une valeur plus grande doit être soustraite plutôt qu'ajoutée.

P. ex.: MCXLIV = 1000 + 100 - 10 + 50 - 1 + 5 = 1144
<<<
</div>
#> [[Exemple de solution|98.2.3.Solution]]

# Écrire une classe appelée //Calcul// comprenant une méthode appelée //Moyenne// qui calcule et retourne la moyenne de nombres réels reçus dans un tableau passé en argument. Écrire ensuite un programme qui demande à l’utilisateur d’entrer //n// valeurs comprises entre un minimum et un maximum et qui passe ces valeurs à la méthode //Moyenne// pour ensuite afficher la moyenne retournée. Le programme affiche un message d’erreur à l’utilisateur si une valeur saisie n’est pas dans l’intervalle [min, max] et demande à l’utilisateur de saisir de nouveau une valeur valide.

# Ajoutez à la classe //Calcul// ci-dessus une méthode appelée //Armstrong// retournant dans un tableau tous les nombres d'Armstrong compris entre 100 et 999, inclusivement. Un nombre d'Armstrong est un nombre qui est égal à la somme des cubes des chiffres qui le composent (p.ex., 153 = 1^^3^^ + 5^^3^^ + 3^^3^^).
#> [[Exemple de solution 4 et 5|https://lecegeplimoilou.sharepoint.com/sites/Section_90756/Supports%20de%20cours/Exemples%20de%20solution/Exercice%2098.2.4-5.zip]]

# Modifier l'exercice 2 ci-dessus de manière à ce que les paramètres d'une partie soient plutôt demandés par la classe //~JeuDeNim// et passés à un constructeur de la classe //Partie//.

# Reprendre les exercices 1, 3 , 4 et 5 ci-dessus en rendant statiques toutes les méthodes demandées et en modifiant les programmes correspondants en conséquence.