created: 20210325230132209
modified: 20210325232735507
tags: [[8.07 Membres statiques]]
title: 8.7.01 Les méthodes statiques
type: text/vnd.tiddlywiki

Une méthode statique est une méthode qui peut être appelée directement dans une classe non instanciée.

Par exemple, remarquez-vous quelque-chose de particulier dans le code ci-dessous, qui inclut pourtant du code maintes fois vu dans des exemples précédents?

```cs
Random rnd = new Random();
int alea = rnd.Next(10);

double n = Math.Pow(2.0, 3.0);
```

Pour générer un nombre aléatoire, on a dû instancier la classe //Random//, mais, étonnamment, on n'a pas créé d'objet de type //Math// pour utiliser la méthode //Pow()//... Pourquoi? C'est parce que la méthode //Pow()// (comme toutes les méthodes de la classe //Math//) est déclarée ''static'', mais pas la méthode //Next()// de la classe //Random//...!

Une méthode pourra être statique seulement si:

# elle n'utilise aucun attribut de la classe, ou
# elle utilise seulement des attributs eux aussi statiques.

!! Exemple

On reprend ici la classe //De//, en ajoutant une méthode statique //Lancer6()// qui permet de lancer un dé à 6 faces sans intantier la classe:

```cs
class De
{
    static private readonly Random rnd = new Random();

    private readonly int nbFaces;

    // Constructeur
    public De(int n = 6)
    {
        nbFaces = n;
    }

    // Lancer le dé avec nbFaces
    public int Lancer()
    {
        return rnd.Next(nbFaces) + 1;
    }

    // Lancer d'un dé à 6 faces
    static public int Lancer6()
    {
        return rnd.Next(6) + 1;
    }
}

class Program
{
    static void Main()
    {
        // Pas besoin d'instancier la classe «De» pour utiliser la méthode statique «Lancer6()»
        Console.WriteLine($"Lancer de dé à 6 faces: {De.Lancer6()}");
    }
}
```