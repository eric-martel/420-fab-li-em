created: 20210216232655482
list: 
modified: 20210325201611013
tags: [[99 Travaux pratiques et examens]]
title: 99.01 TP1 (6 %)
type: text/vnd.tiddlywiki

|!Capacités évaluées: |<ul><li>Capacité 1: Résoudre des problèmes en utilisant les structures algorithmiques</li><li>Capacité 3: Utiliser un environnement de développement intégré (IDE) pour développer des programmes</li></ul>|
|!À remettre: |<ul><li>Le ''dossier complet archivé (.zip)'' de la solution Visual Studio créée</li><li>Un document (MS-Word, ~LibreOffice, PDF...) contenant des captures d'écran de tests complets de fonctionnement du programme</li><li>Remise individuelle par Teams, par l'onglet des devoirs</li><li>Une démonstration par Teams suivant la remise devra être effectuée (voir la ligne «Évaluation» ci-dessous)</li></ul>|
|!Date limite de remise: |<ul><li>Mardi 2 mars, 23h59</li></ul>|
|!Évaluation: |<ul><li>Ce travail vaut pour 6 % de la session</li><li>-10 % par jour de retard</li><li>Note de 0 si travail remis après retour à l'ensemble du groupe ou si le travail a été plagié en tout ou en partie</li><li>50% de la note sera attribuée en fonction du niveau de maîtrise du travail effectué par l'élève, lequel niveau sera établi par une entrevue individuelle verbale (démonstration de la solution)</li></ul>|
|!@@display:block;width:15em;Temps de réalisation estimé si la matière a été préalablement étudiée, pratiquée et comprise:@@ |<ul><li>3h</li></ul>|

! Énoncé

!! Sachant que:

* On peut créer et utiliser un générateur de nombres aléatoires de la façon suivante:<div>

```cs
// Initialise le générateur (une seule fois, idéalement au tout début du programme), ici appelé « rnd »
Random rnd = new Random();

// Génère et stocke un nombre aléatoire situé entre 0 et 9 (inclusivement)
int nbAleatoire1 = rnd.Next(10);

// Génère et stocke un nombre aléatoire situé entre 0 et 22 (inclusivement)
int nbAleatoire2 = rnd.Next(23);
```
</div>

* On peut déclarer et utiliser un tableau avec une taille prédéfinie, sans mettre de valeurs initiales, de la façon suivante:<div>

```cs
int nbElements = 15;

// Déclare un tableau pouvant contenir jusqu'à 15 entiers
int[] entiers = new int[nbElements];

// Affecte la valeur 32 au 5e élément du tableau (index 4)
entiers[4] = 32;

// Pas nécessairement utile pour ce travail, mais à titre indicatif on peut obtenir la taille d'un tableau de la façon suivante:
int tailleEntiers = entiers.Length;  // Stockera 15 dans tailleEntiers
```
</div>

* On peut attendre la saisie d'une touche sans la faire afficher à l'écran avec `Console.ReadKey(true)`

!! Programmer un jeu de dés ayant les spécifications suivantes:

# le programme doit afficher le nom de son auteur/autrice;

# le programme doit afficher son propre nom (soyez créatif!);

# le programme doit afficher les règles du jeu, à savoir que de 2 à 5 joueurs s'affrontent en lançant chacun deux dés de 6 faces (avec des valeurs de 1 à 6), et que le ou les joueurs qui obtiennent le plus haut score gagnent la partie (il peut donc y avoir plusieurs gagnants);

# ''pour chaque partie'', le programme doit:
## demander combien il y a de joueurs (de 2 à 5);
## ''pour chaque joueur'':
### demander au joueur, interpelé par son numéro, d'appuyer sur une touche pour lancer ses dés;
### sur l'appui d'une touche, lancer deux dés pour le joueur en question (c.-à-d., obtenir deux nombres aléatoires entre 1 et 6, inclusivement);
### afficher le résultat des lancers pour ce joueur, à savoir les valeurs individuelles des dés ainsi que le total obtenu;
## annoncer le ou les joueurs gagnants (par leur numéro);
## demander si on désire jouer une autre partie; si oui, le programme démarre une nouvelle partie, sinon le programme se termine;

# pour chaque entrée demandée par le programme:
## on peut supposer que l'usager entrera le bon type de donnée (p.ex., qu'il entrera un entier si on lui demande un entier);
## on doit cependant valider que chaque réponse entrée est à l'intérieur des réponses possibles, sinon le programme doit ''répéter la question'' jusqu'à ce qu'une réponse valide soit obtenue.

!! De plus:

* vous devez choisir des types de variables, des stuctures conditionnelles et des structures de boucles appropriées;

* vous devez réduire au minimum les valeurs codées dur;

* aucun avertissement ni aucune erreur ne doivent être signalés par Visual Studio;

* votre code doit être raisonnablement commenté;

* assurez-vous que votre code soit adéquatement indenté et aéré;

* n'oubliez pas de respecter les conventions de nommage établies.

<p class="boite">

! Toutes les informations contenues dans les sections 1 à 4 ainsi que le présent énoncé sont suffisantes pour réaliser le présent travail.

! Même s'il est incomplet, remettez un travail qui ''compile''.
</p>