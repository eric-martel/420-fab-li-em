created: 20210208131812543
modified: 20210222185015200
tags: [[02 Variables]]
title: 2.03 Les types de variables
type: text/vnd.tiddlywiki

Comme vu [[précédemment|2.01 Introduction]], lorsqu'on déclare une variable, on doit spéficfier son ''type''.

Le type d'une variable servira au compilateur à allouer l'espace nécessaire en mémoire et à contrôler les opérations permises entre différentes variables (p.ex., il serait illogique de multiplier deux chaînes de caractères entre elles).

C# comprend [[plusieurs types de base|https://docs.microsoft.com/fr-fr/dotnet/csharp/language-reference/builtin-types/built-in-types]], mais ceux avec lesquels nous travaillerons principalement pour commencer sont:

* ''int'': désigne une variable de type nombre entier (peut être négatif ou positif) (ex.: 12, 6789, -743...)<div>

```cs
// Déclare une variable «age» contenant l'âge d'une personne
int age = 37;
```
</div>

* ''decimal'': désigne une variable de type nombre réel (ex: -45.9862, 3456.93783, ...)
*> Les types ''double'' et ''float'' sont aussi très utilisés pour les nombres réels: ils offrent l'avantage d'être techniquement plus rapides, mais ont l'inconvénient d'être moins précis que ''decimal''; beaucoup de programmeurs vont aussi les utiliser simplement par habitude, puisque ce sont des types que l'on retrouve dans plusieurs autres langages.<p>Fait à noter, on affecte une valeur littérale ''decimal'' en suffixant un ''m'' à la valeur, et une valeur littérale ''float'' en suffixant un ''f'', alors qu'aucun suffixe n'est nécessaire avec les types ''int'' ou ''double''.</p><div>

```cs
// Déclare une variable de type 'double' et une autre de type 'decimal' (noter le «m» pour le type 'decimal' et le «f» pour le type 'float')
double masse = 70.51;
float poids = 155.12f;
decimal taille = 1.75m;
```
Fait également important à noter, le type ''double'' supporte naturellement la notation exponentielle (p.ex., ''4.7e18'' pour écrire «4.7&times;10^^18^^») lorsqu'un nombre est converti depuis un type ''string'' avec la classe ''[[System.Convert|2.04 Les conversions de types]]'', ce qui n'est pas le cas des autres types, qui demandent un peu plus d'acrobaties en ce sens.
</div>


* ''string'': désigne une variable de type chaîne de caractères (ex.: "Bonjour", "Mon n° de téléphone est le: 123 456-7890", "Quel est votre nom?")

* ''bool'': désigne une variable booléenne, c.-à-d. une variable qui est soit vraie (''true''), soit fausse (''false'').

<p class="boite">

! Le type ''var''

Depuis la version 3.0 de C#, il existe un type générique appelé ''var''. Une variable de type ''var'' peut contenir //n'importe quelle valeur//, peu importe son type formel.

!!! Avantages:
* moins long à écrire
* pas à se casser la tête à choisir le bon type
* plus facile à maintenir si des types retournés changent

!!! Inconvénients:
* perte de clarté (d'information) sur la nature et possiblement le rôle attendu des variables
* plus de risques de bogues dus à des interactions illogiques entre les variables
* perte de contrôle automatique de certaines contraintes (p.ex., nombre entier vs nombre réel)

!! __''Dans le présent cours, pour des raisons pédagogiques et de bonne pratique, l'utilisation du type «var» sera interdite.''__

</p>
