created: 20210325230226637
modified: 20210325232804014
tags: [[8.07 Membres statiques]]
title: 8.7.02 Les attributs statiques
type: text/vnd.tiddlywiki

Un attribut statique est un attribut ''qui aura toujours la même valeur pour toutes les instances d'une même classe''.

Normalement, chaque objet a ses propres valeurs d'attributs. Par exemple, si on reprend la classe //De// avec constructeur de la [[section 8.06|8.06 Constructeur]]:

```cs
// Instancie un dé à 6 faces (défaut)
De d6 = new De();

// Instancie un dé à 20 faces
De d20 = new De(20);
```

On a ici deux objets de type //De//, et chacun aura un attribut //nbFaces// avec une valeur différente de 6 et 20, respectivement.

Mais cela fonctionne tant que l'attribut //nbFaces// de la classe n'est pas statique; si //nbFaces// est plutôt déclaré statique, alors ce ne serait plus le cas: en changeant //nbFaces// pour un dé, alors tous les autres dés prendraient automatiquement le même nombre de faces:

```cs
class De
{
    static private readonly Random rnd = new Random();

    // nbFaces est statique => ce sera la même valeur pour toutes les instances en tout temps
    static private int nbFaces;

    // Constructeur
    public De(int n = 6)
    {
        nbFaces = n;
    }

    // Lancer le dé avec nbFaces
    public int Lancer()
    {
        return rnd.Next(nbFaces) + 1;
    }
}

class Program
{
    static void Main()
    {
        De d6 = new De();

        /* d6 est seul et a 6 faces */
        for (int i = 0; i < 10; i++)
        {
            Console.WriteLine($"d6: {d6.Lancer()}");
        }

        // On crée une nouvelle instance de dé avec 20 faces
        De d20 = new De(20);

        /* Puisque nbFaces est statique dans la classe et qu'on a instancié d20 après d6,
         * maintenant même d6 a 20 faces */
        for (int i = 0; i < 10; i++)
        {
            Console.WriteLine($"d6: {d6.Lancer()}, d20: {d20.Lancer()}");
        }
    }
}
```

Bref, un attribut statique possède en permanence une valeur commune à toutes les instances de sa classe.

<p class="boite">

! Pourquoi déclarer un objet de type //Random// statique?

Comme déjà expliqué, un générateur de nombres pseudo-aléatoires doit être ensemancé (//seeded//) avec une valeur de départ pour générer un premier nombre calculé sur la base de cette semance; chaque valeur suivante sera basée sur la dernière valeur générée. Donc, pour une même semance, la séquence des nombres générés sera //identique//, ce qu'on veut habituellement à tout prix éviter! Il est donc primordial que l'ensemancement se produise //une seule fois//.

La semance par défaut est une valeur temporelle. Si le générateur d'une classe n'est pas statique, alors chaque instanciation de cette classe à l'intérieur de la même unité de temps créera autant de générateurs ayant la même semance, et donc auront la même séquence de nombres aléatoires. Par contre, si le générateur est statique, alors il y aura un seul générateur pour toutes les instances, de sorte que de multiples instanciations dans une même unité de temps seront sans danger.

!! Voyez par vous-même!

Exécutez le code ci-dessous et voyez vous-même le risque causé par des générateurs non statiques...

```cs
class Aleatoire
{
    /* Deux générateurs aléatoires, un static et pas l'autre;
     * pour mettre en évidence le phénomène, ils sont tous les deux explicitement
     * ensemancés avec la valeur arbitraire 1 */
    static private Random rndStatic = new Random(1);
    private Random rndNonStatic = new Random(1);

    /* Retourne un entier de 1 à 99 avec le générateur statique */
    public int GenererStatic()
    {
        return rndStatic.Next(100);
    }

    /* Retourne un entier de 1 à 99 avec le générateur non statique */
    public int GenererNonStatic()
    {
        return rndNonStatic.Next(100);
    }
}

class Program
{
    static void Main()
    {
        // Crée 5 objets Aleatoire générant chacun 10 nombres aléatoires depuis générateur statique
        Console.WriteLine("Avec générateur statique: ");
        for (int i=0; i < 5; i++)
        {
            Aleatoire alea = new Aleatoire();
            for (int j=0; j < 10; j++)
            {
                Console.Write($"{alea.GenererStatic(),-4}");
            }
            Console.WriteLine();
        }

        // Crée 5 objets Aleatoire générant chacun 10 nombres aléatoires depuis générateur non statique
        Console.WriteLine("\n\nAvec générateur non statique: ");
        for (int i = 0; i < 5; i++)
        {
            Aleatoire alea = new Aleatoire();
            for (int j = 0; j < 10; j++)
            {
                Console.Write($"{alea.GenererNonStatic(),-4}");
            }
            Console.WriteLine();
        }
    }
}
```
</p>