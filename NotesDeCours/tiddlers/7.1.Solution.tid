created: 20210307211911600
modified: 20210307212331594
title: 7.1.Solution
type: text/vnd.tiddlywiki

```cs
decimal temperatureEntree;
decimal? temperatureSortie;  // Le «?» indique «nullable», c'est-à-dire que la valeur contenue peut être nulle
string uniteEntree;

static string DemanderUnite()
{
    Console.Write("La température initiale à convertir est-elle en °F (f) ou en °C (c) ? ");
    return Console.ReadLine();
}

static decimal DemanderTemperature()
{
    Console.Write("Entrez la valeur de la température à convertir: ");
    return Convert.ToDecimal(Console.ReadLine());
}

// Le «?» indique «nullable», c'est-à-dire que la valeur retournée peut être nulle
static decimal? ConvertirTemperature(decimal temperature, string uniteEntree)
{
    switch (uniteEntree)
    {
        case "f":
            return (temperature - 32m) * 5m / 9m;
        case "c":
            return (temperature * 9m / 5m) + 32m;
        default:
            return null;
    }
}

static void AfficherSortie(decimal temperatureEntree, string uniteEntree, decimal temperatureSortie)
{
    Console.WriteLine($"{temperatureEntree}{(uniteEntree == "c" ? "°C" : "°F")} = {temperatureSortie}{(uniteEntree == "c" ? "°F" : "°C")}");
}

Console.WriteLine("Convertisseur de température °F/°C");
Console.WriteLine("------------------------------------------------");

temperatureEntree = DemanderTemperature();
uniteEntree = DemanderUnite();
temperatureSortie = ConvertirTemperature(temperatureEntree, uniteEntree);

if (temperatureSortie == null)
{
    Console.WriteLine("Erreur dans les valeurs d'entrée");
}
else
{
    // temperatureSortie est nullable, mais on a traité le cas ci-dessus
    // => on ne veut pas traiter une valeur null dans AfficherSortie(), d'où le transtypage en (decimal)
    AfficherSortie(temperatureEntree, uniteEntree, (decimal)temperatureSortie);
}
```