created: 20210303151521469
modified: 20210308160852885
tags: [[07 Routines]]
title: 7.03 Valeurs de retour
type: text/vnd.tiddlywiki

Quand on définit une fonction avec le type ''void'', cela signifie que la fonctionne ne retourne en fait aucune valeur (définition d'une procédure). Toute fonction qui est cependant déclarée avec un type autre que ''void'' doit cependant retourner une valeur de ce type avec l'instruction ''return'', valeur qui peut ensuite être affectée ou utilisée de toute autre façon par le programme appelant.

Ainsi, l'[[exemple de 7.02|7.02 Les fonctions locales]] pourrait être retravaillé pour plutôt ressembler à ceci:

```cs
static void Main()
{
    // Demande un nombre
    static double DemanderNombre()
    {
        Console.Write("Entrer un nombre réel: ");

        // Retourne la valeur entrée au clavier, convertie en «double»
        return Convert.ToDouble(Console.ReadLine());
    }

    Console.WriteLine($"Le nombre entré est: {DemanderNombre()}");
}
```

Une fonction ne peut avoir ''qu'une seule valeur de retour''; par contre, cette «valeur» peut très bien être un tableau:

```cs
static void Main()
{
    // Calcule des racines et les retourne dans un tableau
    static double[] CalculerDesRacines()
    {
        int nbRacines = 10;

        // Le tableau qui contiendra les racines
        double[] racines = new double[nbRacines];

        // Calcule les racines de 1 à nbRacines
        for (int i = 0; i < racines.Length; i++)
        {
            racines[i] = Math.Sqrt(i + 1);
        }

        return racines;
    }

    // Reçoit les racines
    double[] racines = CalculerDesRacines();

    // Affiche les racines
    foreach (double racine in racines)
    {
        Console.WriteLine(racine);
    }
}
```


! Retourner un ''null''

Tout comme une variable [[peut contenir un null|2.09 Variables nullables]] en apposant un point d'interrogation à son type déclaré, une fonction peut retourner un ''null'' en faisant de même avec son type déclaré:

```cs
// Convertit une chaîne en entier et retourne la valeur obtenu, ou sinon (si échec de conversion) retourne null
static int? ConvertirEntier(string chaineEntier)
{
    if (int.TryParse(chaineEntier, out int entier))
    {
        return entier;
    }
    else
    {
        return null;
    }
}
```

---

<p class="boite">

! Le ''return''

Le ''return'' sert non seulement à retourner une valeur, mais il sert aussi à sortir d'une fonction; ainsi, on peut sortir d'une fonction ne retournant rien (type ''void'') avec un simple `return;`, sans valeur.

Et comme un ''return'' sort //immédiatement// de la fonction, il n'y aura rien d'évalué après son apparition, ce qui permet donc d'interrompre des boucles ou des ''switch'' sans devoir utiliser un ''break''.

!! Exemple

```cs
// Traduit quelques mots de l'anglais au français
static string Traduire(string motAnglais)
{
    switch (motAnglais)
    {
        case "house":
            return "maison";
        case "car":
            return "voiture";
        case "horse":
            return "cheval";
        default:
            return "[mot inconnu]";
    }
}
```
</p>

---

<iframe width="640" height="360" src="https://web.microsoftstream.com/embed/video/b8b4f868-0a3b-4338-bae2-07b70d986509?autoplay=false&amp;showinfo=true" allowfullscreen style="border:none;"></iframe>