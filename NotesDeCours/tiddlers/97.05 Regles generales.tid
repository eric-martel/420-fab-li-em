created: 20210314164214010
modified: 20210314164259763
tags: [[97 Petit guide de programmation]]
title: 97.05 Règles générales
type: text/vnd.tiddlywiki

Lorsqu'on développe un programme, il faut autant que possible garder les points suivants à l'esprit:

# ''la lisibilité du code:'' on veut que le code soit naturellement facile à lire et à suivre, sans toujours devoir s'appuyer sur des commentaires; en fait, les commentaires devraient être réduits au minimum et servir à véhiculer des intentions non immédiatement évidentes à la lecture du code;

# ''la facilité de maintenance:'' on veut que le programme soit facile à maintenir, corriger et modifier; il faut donc toujours se demander ce que ça impliquerait comme travail de modifier certains paramètres du programme, et s'assurer que ce sera le plus facile possible;

# ''l'extensibilité (//scalability//):'' en plus des maintenances normales et petites modifications, il faut aussi se demander si notre porgramme serait facile à modifier pour traiter de plus grandes valeurs ou un plus grand volume de données; bref, si on nous demande d'écrire un jeu pour 5 joueurs, quel serait l'impact de le modifier pour, p.ex., 1000 joueurs? Si on veut un programme pour trier un tableau de 10 éléments, quel serait l'impact de le modifier pour, p.ex., 1000 éléments? Etc. On essaie de choisir une solution qui favorisera le plus possible l'extensibilité du programme.


Il peut y avoir plusieurs stratégies pour atteindre ces objectifs, qui vont souvent de pair; notamment:

* noms d'éléments clairs et significatifs;

* éviter le plus possible les valeurs codées dur (littérales); pour celles qui sont nécessaires, on s'assure qu'elles n'apparaissent qu'une seule fois dans le code (idéalement, en stockant chacune dans une variable -- probablement déclarée ''const'' -- au nom significatif), de sorte que si jamais ces valeurs ont à changer, il n'y aura qu'une seule ligne par valeur à modifier;

* identifier et choisir les structures de contrôle les plus aptes à rendre le code concis et «automatique» (bons types de boucles, bonnes conditions d'itération);

* morceler le plus possible le programme en sous-unités appropriées (classes, routines).