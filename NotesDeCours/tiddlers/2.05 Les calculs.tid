created: 20210209150217790
list: 
modified: 20210213180836084
tags: [[02 Variables]]
title: 2.05 Les calculs
type: text/vnd.tiddlywiki

Comme on a déjà pu voir dans des exemples précédents, C# supporte directement les quatre opérations de base sur tous les types numériques:

```cs
decimal num1 = 23.89;
decimal num2 = 17.41;
decimal num3;

// Addition
num3 = num1 + num2;

// Soustraction
num3 = num1 - num2;

// Multiplication
num3 = num1 * num2;

// Division
num3 = num1 / num2;

// On peut utiliser les parenthèses pour regrouper des opérations
num3 = (num1 - num2) / (num1 + num2);
```

De plus, la classe [[System.Math|https://docs.microsoft.com/fr-fr/dotnet/api/system.math?view=net-5.0]] supporte plusieurs autres calculs (se référer à la documentation pour chaque fonction de calcul pour connaître les types de variables supportés par chacune):

```cs
double num1 = 23.89;
double num2 = 17.41;
double num3;

// Puissance; ici num1^num2
num3 = Math.Pow(num1,num2);

// Racine carrée
num3 = Math.Sqrt(num1);

// Arrondi
num3 = Math.Round(num1);

// Sinus
num3 = Math.Sin(num1);

//...
```

Si une fonction mathématique ne supporte que certains types numériques, une conversion forcée peut être nécessaire:

```cs
decimal num1 = 23.89m;
decimal num2 = 17.41m;
decimal num3;

// Math.Pow() retourne un 'double' et n'accepte que des 'double' en arguments
num3 = (decimal)Math.Pow((double)num1, (double)num2);
```

<p class="boite">

! ''ATTENTION!''

Si vous utilisez des valeur littérales entières dans des calculs, elles seront traitées comme des ''int'' et le résultat pourrait en être affecté:

```cs
// Ci-dessous, le quotient sera de zéro
double quotient1 = 1 / 3;

// Ci-dessous, le quotient sera de 0.3333...
double quotient2 = 1.0 / 3.0;
```

Ce ne sera cependant pas le cas avec des valeurs suffixées:

```cs
// Ci-dessous, le quotient sera de 0.3333...
float quotient3 = 1f / 3f;

// Ci-dessous, le quotient sera de 0.3333...
decimal quotient4 = 1m / 3m;
```
</p>

! Incrémentation et décrémentation

Deux opérations mathématiques très utilisées en programmation sont l'''incrémentation'' (augmenter une valeur entière) et la ''décrémentation'' (diminuer une valeur entière).

Comme ces opérations sont très courantes, des raccourcis ont été créés:

* Pour incrémenter de 1 une variable, plutôt que de faire `variable = variable + 1`, il suffit de faire `variable++` ou `++variable`
** la position du `++`  a une incidence sur l'ordre d'évaluation de la variable; si le `++` est placé avant la variable, alors l'incrémentation est faite avant l'évaluation de la variable, alors que s'il est placé après, alors l'incrémentation est faite après l'évaluation:<div>

```cs
int entier = 0;
entier++; // entier vaudra 1
++entier; // entier vaudra 2
WriteLine($"{entier++}"); // Affichera 2, et ensuite augmentera entier à 3
WriteLine($"{++entier}"); // Augmentera entier à 4, et ensuite affichera 4
```
</div>

* Pour décrémenter de 1, on a l'opérateur `--`, qui se comporte comme `++`, mais à la négative

* Pour incrémenter ou décrémenter d'un nombre entier quelconque, on a les opérateurs `+=` et `-=`:<div>

```cs
int entier = 7;
entier += 13;  // Entier vaudra 20
entier -= 5; // Entier vaudra 15
```
</div>

---

<iframe width="640" height="360" src="https://web.microsoftstream.com/embed/video/97c230da-88f8-48b2-aa99-d1dcd715954a?autoplay=false&amp;showinfo=true" allowfullscreen style="border:none;"></iframe>